class LRUCache {
public:
class Node{
    public:
    int key;
    int val;
    Node*prev,*next;
    Node(int _key,int _val){
        key=_key;
        val=_val;
    }
};
Node*head=new Node(-1,-1);
Node*tail=new Node(-1,-1);
int cap;
unordered_map<int,Node*>mp;

    LRUCache(int capacity) {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    void addnode(Node*newnode){
       Node*temp=head->next;
       newnode->next=temp;
       newnode->prev=head;
       head->next=newnode;
       temp->prev=newnode;
    }
    void deletenode(Node*delnode){
        Node*delprev=delnode->prev;
        Node*delnext=delnode->next;
        delprev->next=delnext;
        delnext->prev=delprev;
    }
    int get(int key) {
        if(mp.find(key)!=mp.end()){
           Node*resnode=mp[key];
           int res=resnode->val;
           mp.erase(key);
           deletenode(resnode);
           addnode(resnode);
        //    bringing on  the head->next from the tail node this is his new value so initilizaing that
           mp[key]=head->next;
           return res;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()){
           Node*existingnode=mp[key];
           mp.erase(key);
           deletenode(existingnode);
        }
        if(mp.size()==cap){
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new Node(key,value));
        mp[key]=head->next;
    }
};