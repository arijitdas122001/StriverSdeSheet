#include <bits/stdc++.h>
bool bfs(int node,vector<int>&col,vector<int>adj[]){
	queue<int>q;
	q.push(node);
	col[node]=0;
	while(!q.empty()){
		int node=q.front();
		q.pop();
		for(auto it:adj[node]){
			if(col[it]==-1){
				col[it]=1-col[node];
				q.push(it);
			}
			else if(col[it]==col[node]){
				return false;
			}
		}
	}
	return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
	int n=edges.size();
	int m=edges[0].size();
	vector<int>adj[n];
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(i==j)continue;
                        if (edges[i][j]) {
                          adj[i].push_back(j);
                          adj[j].push_back(i);
                        }
                }
	}
	vector<int>col(n,-1);
	for(int i=0;i<n;i++){
		if(col[i]==-1){
			if(bfs(i,col,adj)==false){
				return false;
			}
		}
	}
	return true;
}