int maxprofit(int ind,int n,vector<int>&price){
	if(ind==0){
		return price[0]*n;
	}
	int rodlength=ind+1;
	// take
	int take=INT_MIN;
        if (rodlength<=n) {
         take = price[ind]+maxprofit(ind, n - rodlength, price);
        }
        // nottake
	int nottake=maxprofit(ind-1, n, price);
	return max(take,nottake);
}
int cutRod(vector<int> &price, int N)
{
	// Write your code here.
	int sz=price.size();
	vector<vector<int>> dp(N,vector<int>(N+1,-1));
    
    for(int i=0; i<=N; i++){
        dp[0][i] = i*price[0];
    }
    
    for(int ind=1; ind<N; ind++){
        for(int length =0; length<=N; length++){
        
             int notTaken = 0 + dp[ind-1][length];
    
             int taken = INT_MIN;
             int rodLength = ind+1;
             if(rodLength <= length)
                taken = price[ind] + dp[ind][length-rodLength];
        
             dp[ind][length] = max(notTaken,taken);   
        }
    }
    
    return dp[N-1][N];
}
