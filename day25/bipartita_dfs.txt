bool dfs(int node,int col,vector<int>&color,vector<int>adj[]){
	color[node]=col;
	for(auto it:adj[node]){
		if(color[it]==-1){
			if(dfs(it,1-col,color,adj)==false){
				return false;
			}
		}
		else if(color[it]==color[node]){
			return false;
		}
	}
	return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
	int n=edges.size();
	int m=edges[0].size();
	vector<int>adj[n];
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(i==j)continue;
                        if (edges[i][j]) {
                          adj[i].push_back(j);
                          adj[j].push_back(i);
                        }
                }
	}
	vector<int>col(n,-1);
	for(int i=0;i<n;i++){
		if(col[i]==-1){
			// if(bfs(i,col,adj)==false){
			// 	return false;
			// }
			if(dfs(i,0,col,adj)==false){
				return false;
			}
		}
	}
	return true;
}