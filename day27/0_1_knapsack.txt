int giveprofit(int ind,vector<int> &values, vector<int> &weights, int n, int w){
	if(ind==0){
		if(weights[ind]<=w){
			return values[ind];
		}else{
			return 0;
		}
	}
	int take=0,nottake=0;
	// taking that weight
        if (weights[ind] <= w) {
          take = values[ind] +
                 giveprofit(ind - 1, values, weights, n, w - weights[ind]);
        }
        // not taking thaty weight
	nottake=0+giveprofit(ind-1,values,weights,n,w);
	return max(take,nottake);
}
int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	// Write your code here
	vector<vector<int>>dp(n,vector<int>(w+1,0));
	for(int i=weights[0];i<=w;i++){
		dp[0][i]=values[0];
	}
	for(int i=1;i<n;i++){
		for(int j=0;j<=w;j++){
			int take=0,nottake=0;
			if(weights[i]<=j){
				take=values[i]+dp[i-1][j-weights[i]];
			}
			nottake=0+dp[i-1][j];
			dp[i][j]=max(take,nottake);

		}
	}
	return dp[n-1][w];
	// return giveprofit(n-1,values,weights,n,w);
}