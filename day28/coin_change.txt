class Solution {
    private:
    int maxValue(int ind,vector<int>&coins,int amount,int n){
        if(ind==0){
            if(amount%coins[0]==0)return amount/coins[0];
            else return 1e9;
        }
        int take=1e9,nottake=0;
        // not take
        nottake=0+maxValue(ind-1,coins,amount,n);
        // take
        if(amount>=coins[ind]){
        take=1+maxValue(ind,coins,amount-coins[ind],n);
        }
        return min(nottake,take);
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,0));
        for(int i=0;i<=amount;i++){
            if(i%coins[0]==0)dp[0][i]=i/coins[0];
            else dp[0][i]=1e9;
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=amount;j++){
                int take=1e9,nottake=0;
                nottake=0+dp[i-1][j];
                if(j>=coins[i]){
                    take=1+dp[i][j-coins[i]];
                }
                dp[i][j]=min(nottake,take);
            }
        }
        // if(maxValue(n-1,coins,amount,n)==1e9)return -1;
        // return maxValue(n-1,coins,amount,n);
        if(dp[n-1][amount]==1e9)return -1;
        return dp[n-1][amount];
    }
};