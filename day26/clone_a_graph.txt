/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
    private:
    unordered_map<Node*,Node*>mp;
public:
    Node* cloneGraph(Node* node) {
        if(node==NULL)return NULL;
        Node*dummy=new Node(node->val,{});
        mp[node]=dummy;
        queue<Node*>q;
        q.push(node);
        while(!q.empty()){
           Node*top=q.front();
           q.pop();
           for(auto it:top->neighbors){
               if(mp.find(it)==mp.end()){
                   mp[it]=new Node(it->val,{});
                   q.push(it);
               }
               mp[top]->neighbors.push_back(mp[it]);
           }
        }
        return dummy;
    }
};