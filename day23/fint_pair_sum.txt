class BSTIterator {
    private:
    stack<TreeNode*>st;
    // isreverse=true->right
    // isreversr=false->left;
    bool isreverse;
    void pushallleft(TreeNode*root,bool reverse){
        while(root){
            st.push(root);
            if(reverse==true){
                root=root->right;
            }else{
            root=root->left;
            }
        }
    }
public:
    BSTIterator(TreeNode* root,bool reverse) {
        isreverse=reverse;
        pushallleft(root,isreverse);
    }
    
    int next() {
        TreeNode*top=st.top();
        st.pop();
        if(isreverse==true){
            pushallleft(top->left,isreverse);
        }else{
        pushallleft(top->right,isreverse);
        }
        return top->val;
    }
    
    bool hasNext() {
        return !st.empty();
    }
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        BSTIterator it1(root,false);
        BSTIterator it2(root,true);
        int i=it1.next();
        int j=it2.next();
        while(i<j){
            if(i+j==k)return true;
            else if(i+j<k){
                i=it1.next();
            }else{
                j=it2.next();
            }
        }
        return false;
    }
};