class Solution {
    private:
    bool func(string s,unordered_map<string,int>&mp,unordered_map<string,bool>&dp){
        if(mp.find(s)!=mp.end())return true;
        if(dp.find(s)!=dp.end())return dp[s];
      for(int i=0;i<s.size();i++){
          string left=s.substr(0,i+1);
          string right=s.substr(i+1);
          if(mp.find(left)!=mp.end()){
              bool res=func(right,mp,dp);
              if(res==true){
                  dp[right]=true;
                  return true;
              }
          }
      }
      dp[s]=false;
      return false;
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_map<string,int>mp;
        for(auto it:wordDict){
            mp[it]++;
        }
        unordered_map<string,bool>dp;
        return func(s,mp,dp);
    }
};