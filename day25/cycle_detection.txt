#include <bits/stdc++.h>
bool bfs(int src,vector<int>adj[],queue<pair<int,int>>&q,vector<int>&vis){
    q.push({src,-1});
    vis[src]=1;
    while(!q.empty()){
        int node=q.front().first;
        int parent=q.front().second;
        q.pop();
        for(auto it:adj[node]){
          if(!vis[it]){
              q.push({it,node});
              vis[it]=1;
          }
          else if(it!=parent){
              return true;
          }
        }
    }
    return false;
}
bool dfs(int src,int parent,vector<int>adj[],vector<int>&vis){
    vis[src]=1;
    for(auto it:adj[src]){
        if(!vis[it]){
            if(dfs(it,src,adj,vis)==true){
                return true;
            }
        }else if(it!=parent){
            return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    vector<int>adj[n+1];
    for(int i=0;i<m;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    queue<pair<int,int>>q;
    vector<int>vis(n+1,0);
    for(int i=1;i<=n;i++){
        if(!vis[i]){
          if (bfs(i, adj, q, vis) == true) {
            return "Yes";
          }
        }
    }
    return "No";
}
